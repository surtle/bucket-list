{"version":3,"sources":["Map.js","components/MapContainer.js","App.js","serviceWorker.js","index.js"],"names":["mapStyles","position","width","height","CurrentLocation","props","initialCenter","lat","lng","state","currentLocation","prevProps","prevState","google","this","loadMap","recenterMap","map","current","maps","center","LatLng","panTo","centerAroundCurrentLocation","navigator","geolocation","getCurrentPosition","pos","coords","setState","latitude","longitude","mapRef","refs","node","ReactDOM","findDOMNode","zoom","mapConfig","Object","assign","Map","children","React","Children","c","cloneElement","mapCenter","style","ref","renderChildren","Component","defaultProps","visible","MapContainer","showingInfoWindow","activeMarker","selectedPlace","onMarkerClick","marker","e","onClose","onClick","name","GoogleApiWrapper","apiKey","firebase","require","initializeApp","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","database","App","className","class","href","Boolean","window","location","hostname","match","render","document","getElementById","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.847b1b97.chunk.js","sourcesContent":["import React from 'react';\nimport ReactDOM from 'react-dom';\n\nconst mapStyles = {\n    map: {\n        position: 'absolute',\n        width: '100%',\n        height: '100%',\n    }\n};\n\nexport class CurrentLocation extends React.Component {\n    constructor(props){\n        super(props);\n        const { lat, lng } = this.props.initialCenter;\n        this.state = {\n            currentLocation: {\n                lat: lat,\n                lng: lng\n            }    \n        };\n    }\n    componentDidUpdate(prevProps, prevState) {\n        if (prevProps.google !== this.props.google) {\n          this.loadMap();\n        }\n        if (prevState.currentLocation !== this.state.currentLocation) {\n          this.recenterMap();\n        }\n      }\n      recenterMap() {\n        const map = this.map;\n        const current = this.state.currentLocation;\n    \n        const google = this.props.google;\n        const maps = google.maps;\n    \n        if (map) {\n          let center = new maps.LatLng(current.lat, current.lng);\n          map.panTo(center);\n        }\n      }\n      componentDidMount() {\n        if (this.props.centerAroundCurrentLocation) {\n          if (navigator && navigator.geolocation) {\n            navigator.geolocation.getCurrentPosition(pos => {\n              const coords = pos.coords;\n              this.setState({\n                currentLocation: {\n                  lat: coords.latitude,\n                  lng: coords.longitude\n                }\n              });\n            });\n          }\n        }\n        this.loadMap();\n      }\n      loadMap() {\n        if (this.props && this.props.google) {\n          // checks if google is available\n          const { google } = this.props;\n          const maps = google.maps;\n    \n          const mapRef = this.refs.map;\n    \n          // reference to the actual DOM element\n          const node = ReactDOM.findDOMNode(mapRef);\n    \n          let { zoom } = this.props;\n          const { lat, lng } = this.state.currentLocation;\n          const center = new maps.LatLng(lat, lng);\n          const mapConfig = Object.assign(\n            {},\n            {\n              center: center,\n              zoom: zoom\n            }\n          );\n    \n          // maps.Map() is constructor that instantiates the map\n          this.map = new maps.Map(node, mapConfig);\n        }\n      }\n      renderChildren() {\n        const { children } = this.props;\n    \n        if (!children) return;\n    \n        return React.Children.map(children, c => {\n          if (!c) return;\n          return React.cloneElement(c, {\n            map: this.map,\n            google: this.props.google,\n            mapCenter: this.state.currentLocation\n          });\n        });\n      }\n      render() {\n        const style = Object.assign({}, mapStyles.map);\n       return (\n         <div>\n           <div style={style} ref=\"map\">\n             Loading map...\n           </div>\n           {this.renderChildren()}\n         </div>\n       );\n     }\n\n\n}\n\n\nCurrentLocation.defaultProps = {\n    zoom: 14,\n    initialCenter: {\n      lat: -1.2884,\n      lng: 36.8233\n    },\n    centerAroundCurrentLocation: false,\n    visible: true\n  };\n\nexport default CurrentLocation;","import React, { Component } from \"react\";\nimport { GoogleApiWrapper, InfoWindow, Marker } from \"google-maps-react\";\nimport \"assets/App.css\";\nimport CurrentLocation from \"Map\";\n\nconst mapStyles = {\n  width: \"100%\",\n  height: \"100%\"\n};\n\nexport class MapContainer extends Component {\n  state = {\n    showingInfoWindow: false, //Hides or the shows the infoWindow\n    activeMarker: {}, //Shows the active marker upon click\n    selectedPlace: {} //Shows the infoWindow to the selected place upon a marker\n  };\n  onMarkerClick = (props, marker, e) =>\n    this.setState({\n      selectedPlace: props,\n      activeMarker: marker,\n      showingInfoWindow: true\n    });\n\n  onClose = props => {\n    if (this.state.showingInfoWindow) {\n      this.setState({\n        showingInfoWindow: false,\n        activeMarker: null\n      });\n    }\n  };\n  render() {\n    return (\n      <div>\n        <CurrentLocation\n          centerAroundCurrentLocation\n          google={this.props.google}\n          zoom={14}\n          style={mapStyles}\n        >\n          <Marker onClick={this.onMarkerClick} name={\"current location\"} />\n\n          <InfoWindow\n            marker={this.state.activeMarker}\n            visible={this.state.showingInfoWindow}\n            onClose={this.onClose}\n          >\n            <div>\n              <h4>{this.state.selectedPlace.name}</h4>\n            </div>\n          </InfoWindow>\n          \n        </CurrentLocation>\n\n      </div>\n    );\n  }\n}\n\nexport default GoogleApiWrapper({\n  apiKey: \"AIzaSyCVCnlvTmnjOYLcbHE6jKnPLq9hb1UtThY\"\n})(MapContainer);\n","import React, { Component } from 'react';\nimport ReactDOM from 'react-dom';\nimport 'assets/App.css';\nimport MapContainer from 'components/MapContainer';\nimport FlexView from 'react-flexview';\n\n\n// ===================== FIREBASE SETUP ============================\n\nvar firebase = require(\"firebase/app\");\n\nrequire(\"firebase/auth\");\nrequire(\"firebase/database\");\n\nconst firebaseConfig = {\n  apiKey: \"AIzaSyAj52JUY4jm-SQU5td6zPyiBNWyX0x-5l4\",\n  authDomain: \"bucketlist-c95a0.firebaseapp.com\",\n  databaseURL: \"https://bucketlist-c95a0.firebaseio.com\",\n  projectId: \"bucketlist-c95a0\",\n  storageBucket: \"bucketlist-c95a0.appspot.com\",\n  messagingSenderId: \"300377193585\",\n  appId: \"1:300377193585:web:b2d856768f2dc4f6d36fd0\",\n  measurementId: \"G-GX1SX7KKYV\"\n};\n\nfirebase.initializeApp(firebaseConfig);\n\n// get reference to database service\nvar database = firebase.database();\n\n// =================================================================\n\nconst mapStyles = {\n  width: '100%',\n  height: '100%'\n};\n\nfunction App() {\n  \n  return (\n    <div className=\"App\">\n      <div class=\"header\">\n        <a href = \"/\" class=\"title\">bucketlist</a>\n      </div>\n\n\n      <div class = \"list\" >\n        <ul class = \"menu\">\n            <li>Sign in</li>\n            <li>About</li>\n            <li>My Itinerary</li> \n        </ul>\n      </div>\n      \n      <div>\n        <MapContainer/>\n      </div>\n      \n      \n\n    </div>\n  );\n \n}\n\n\n\nexport default App","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'assets/index.css';\nimport App from 'App';\nimport * as serviceWorker from 'serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}